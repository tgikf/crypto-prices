import("./global.dae64e40.js").then(({LOG_LEVEL_DEBUG:i})=>{i||(self.console.debug=()=>{})});Promise.all([import("./WorkerMessageOperations.e53da7d0.js"),import("./BinanceSocketHandler.07c41590.js"),import("./CoinbaseSocketHandler.661118f0.js"),import("./CoinFlexSocketHandler.860b06d8.js"),import("./BitmexSocketHandler.9b7e9064.js")]).then(([{default:i},{default:l},{default:c},{default:u},{default:f}])=>{const t={providers:[]},b=e=>{const{symbol:n,provider:r,ask:s,bid:o}=e;let a=!1;return!n||!r||!s||!o?!1:((!t.bid||o>t.bid)&&(t.bid=Number(o).toFixed(6),t.bidProvider=r,a=!0),(!t.ask||s<t.ask)&&(t.ask=Number(s).toFixed(6),t.askProvider=r,a=!0),(t.providers.length<=0||!t.providers.includes(r))&&(t.providers.push(r),a=!0),console.debug(`From ${e.provider}: Received ${a?"relevant##":"irrelevant"} event for ${e.symbol} at ${Date.now()}`,e),a)},v=e=>{b(e)&&postMessage({operation:i.PRICE_UPDATE,data:t})},d=[l,c,u,f].map(e=>new e(v));d.forEach(async e=>{await e.waitForReadyState(),postMessage({operation:i.SOCKET_READY,handler:e.provider})}),onmessage=e=>{const{operation:n,symbol:r,handler:s}=e.data;switch(n){case i.TERMINATE_CHILDREN:d.forEach(o=>o.close()),self.close();break;case i.SUBSCRIBE_FEED:d.filter(o=>o.provider===s)[0].subscribe(r);break;case i.UNSUBSCRIBE_FEED:d.forEach(o=>o.unsubscribe(r));break;default:console.error(`socketWorker: Received invalid operation ${n}`)}}});
