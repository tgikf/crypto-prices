let i;const e={providers:[]};let p,n;const c=a=>{const{symbol:r,provider:s,ask:o,bid:d}=a.data;let t=!1;return!r||!s||!o||!d?!1:((!e.bid||e.bidProvider===s||d>e.bid)&&(e.bid=Number(d).toFixed(6),e.bidProvider=s,t=!0),(!e.ask||e.askProvider===s||o<e.ask)&&(e.ask=Number(o).toFixed(6),e.askProvider=s,t=!0),(e.providers.length<=0||!e.providers.includes(s))&&(e.providers.push(s),t=!0),t&&(p=Date.now()),t)};setInterval(()=>{e.bid&&e.ask&&(!n||p>n)&&postMessage({operation:4,data:e}),n=p},120);onmessage=a=>{const{operation:r,symbol:s,sharedWorkerPort:o}=a.data;switch(r){case 5:i=o,i.onmessage=c,i.postMessage({operation:6,symbol:s}),self.postMessage({operation:0});break;case 2:i.postMessage({operation:r,symbol:s});break;case 3:i.postMessage({operation:r,symbol:s});break;default:console.error(`instrumentWorker: Received invalid operation ${r}`)}};import("./global.96739b7f.js").then(({LOG_LEVEL_DEBUG:a})=>{a||(self.console.debug=()=>{})});
