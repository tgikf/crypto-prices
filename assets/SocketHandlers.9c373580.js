class r{constructor(t){this.publishUpdate=t,setInterval(()=>{Object.entries(this.bestPrices).forEach(([i,s])=>{s?.symbol&&s!==this.lastPrice[s.symbol]&&(this.lastPrice[s.symbol]=s,t(s))})},250)}socket;provider;subscribedSymbols;bestPrices={};lastPrice={};sleep=t=>new Promise(i=>setTimeout(i,t));close(){this.socket.close()}async waitForReadyState(){let t=0;const i=5e3;for(;this.socket.readyState!==this.socket.OPEN&&t<i;)await this.sleep(10),t+=10;this.socket.readyState!==this.socket.OPEN&&console.error(`Socket with ${this.provider} didn't open within ${i/1e3} seconds`)}}var o=(e=>(e.BINANCE="Binance",e.COINBASE="Coinbase",e.COINFLEX="CoinFLEX",e.BITMEX="BitMEX",e))(o||{});export{r as G,o as S};
