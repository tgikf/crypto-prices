let i;const s={};let p,n;const c=t=>{const{symbol:e,provider:r,ask:o,bid:d}=t.data;let a=!1;return!e||!r||!o||!d?!1:(s[e]===void 0&&(s[e]={providers:[]}),(!s[e].bid||s[e].bidProvider===r||d>s[e].bid)&&(s[e].bid=Number(d).toFixed(6),s[e].bidProvider=r,a=!0),(!s[e].ask||s[e].askProvider===r||o<s[e].ask)&&(s[e].ask=Number(o).toFixed(6),s[e].askProvider=r,a=!0),(s[e].providers.length<=0||!s[e].providers.includes(r))&&(s[e].providers.push(r),a=!0),a&&(p=Date.now()),a)};setInterval(()=>{for(const[t,e]of Object.entries(s))e.bid&&e.ask&&(!n||p>n)&&postMessage({operation:4,symbol:t,data:s}),n=p},100);onmessage=t=>{const{operation:e,symbol:r,sharedWorkerPort:o}=t.data;switch(e){case 5:i=o,i.onmessage=c,setTimeout(()=>self.postMessage({operation:0}),2500);break;case 2:i.postMessage({operation:e,symbol:r});break;case 3:i.postMessage({operation:e,symbol:r});break;default:console.error(`instrumentWorker: Received invalid operation ${e}`)}};import("./global.3cbd9d03.js").then(({LOG_LEVEL_DEBUG:t})=>{t||(self.console.debug=()=>{})});
