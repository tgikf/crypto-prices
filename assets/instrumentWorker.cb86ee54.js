import("./global.dae64e40.js").then(({LOG_LEVEL_DEBUG:i})=>{i||(self.console.debug=()=>{})});Promise.all([import("./WorkerMessageOperations.e53da7d0.js"),import("./BinanceSocketHandler.07c41590.js"),import("./CoinbaseSocketHandler.661118f0.js"),import("./CoinFlexSocketHandler.860b06d8.js"),import("./BitmexSocketHandler.9b7e9064.js")]).then(([{default:i},{default:l},{default:c},{default:u},{default:f}])=>{const e={providers:[]},b=r=>{const{symbol:d,provider:t,ask:a,bid:o}=r;let n=!1;return!d||!t||!a||!o?!1:((!e.bid||e.bidProvider===t||o>e.bid)&&(e.bid=Number(o).toFixed(6),e.bidProvider=t,n=!0),(!e.ask||e.askProvider===t||a<e.ask)&&(e.ask=Number(a).toFixed(6),e.askProvider=t,n=!0),(e.providers.length<=0||!e.providers.includes(t))&&(e.providers.push(t),n=!0),n)},p=r=>{b(r)&&postMessage({operation:i.PRICE_UPDATE,data:e})},s=[l,c,u,f].map(r=>new r(p));s.forEach(async r=>{await r.waitForReadyState(),postMessage({operation:i.SOCKET_READY,handler:r.provider})}),onmessage=r=>{const{operation:d,symbol:t,handler:a}=r.data;switch(d){case i.TERMINATE_CHILDREN:s.forEach(o=>o.close()),self.close();break;case i.SUBSCRIBE_FEED:s.filter(o=>o.provider===a)[0].subscribe(t);break;case i.UNSUBSCRIBE_FEED:s.forEach(o=>o.unsubscribe(t));break;default:console.error(`socketWorker: Received invalid operation ${d}`)}}});
